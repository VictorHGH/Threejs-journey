---
import Layout from '../../layouts/Layout.astro';
import ClassTitle from '../../components/classtitle.astro';
---

<Layout title="Cameras">

  <ClassTitle title="Cameras" />

  <script>
    import * as THREE from 'three'
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'

    // Cursor
    const cursor = {
      x: 0,
      y: 0
    }
    window.addEventListener('mousemove', (e) => {
      cursor.x = e.clientX / sizes.width - 0.5
      cursor.y = - (e.clientY / sizes.height - 0.5)
    })

    const sizes = {
      width: 600,
      height: 400
    }

    // Scene
    const scene = new THREE.Scene()


    // Object
    const mesh = new THREE.Mesh(
      new THREE.BoxGeometry(1, 1, 1, 5, 5, 5),
      new THREE.MeshBasicMaterial({ color: 'red' })
    )
    scene.add(mesh)

    // Camera
    /* const aspecRatio = sizes.width / sizes.height */
    /* const camera = new THREE.OrthographicCamera(-1 * aspecRatio, 1 * aspecRatio, 1, -1, 0.1, 100) */
    const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)
    /* camera.position.x = 2 */
    /* camera.position.y = 2 */
    camera.position.z = 3
    scene.add(camera)


    // Canvas
    const canvas = document.querySelector('canvas')
    const controls = new OrbitControls(camera, canvas)
    controls.enableDamping = true

    const renderer = new THREE.WebGLRenderer({
      canvas: canvas
    })


    renderer.setSize(sizes.width, sizes.height)

    // Animation
    const animation = () => {

      // Update Camera
      /* mesh.rotation.y = elapsedTime */
      /* camera.position.x = Math.sin(cursor.x * Math.PI * 2) * 3 */
      /* camera.position.z = Math.cos(cursor.x * Math.PI * 2) * 3 */
      /* camera.position.y = cursor.y * 5 */
      /* camera.lookAt(mesh.position) */

      // Render
      window.requestAnimationFrame(animation)
      controls.update()
      renderer.render(scene, camera)
      
    }
    animation()

  </script>

</Layout>
