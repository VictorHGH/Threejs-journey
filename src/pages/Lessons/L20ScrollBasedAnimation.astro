---
import Layout from '../../layouts/Layout.astro';
import ClassTitle2 from '../../components/classtitle2.astro';
---

<Layout title="Scroll based animation">

  <ClassTitle2 title="Scroll based animation" />

  <section class="section">
    <h1>My Portfolio</h1>
  </section>
  <section class="section">
    <h2>My projects</h2>
  </section>
  <section class="section">
    <h2>Contact me</h2>
  </section>

  <script>
    import * as THREE from 'three'
    import * as dat from 'lil-gui'

    /**
     * Debug
     */
    const gui = new dat.GUI()

    const parameters = {
        materialColor: '#ffeded'
    }

    gui.addColor(parameters, 'materialColor')

    /**
     * Base
     */
    // Canvas
    const canvas = document.querySelector('canvas.webgl')

    // Scene
    const scene = new THREE.Scene()

    /**
     * Objects
     */
    const mesh = new THREE.Mesh(
      new THREE.TorusGeometry(1, 0.4, 16, 60),
      new THREE.MeshBasicMaterial({ color: '#ff0000'})
    )

    const mesh2 = new THREE.Mesh(
      new THREE.ConeGeometry(1, 2, 32),
      new THREE.MeshBasicMaterial({ color: '#ff0000'})
    )

    const mesh3 = new THREE.Mesh(
      new THREE.TorusKnotGeometry(0.8, 0.3, 100, 16),
      new THREE.MeshBasicMaterial({ color: '#ff0000'})
    )

    /**
     * Sizes
     */
    const sizes = {
      width: window.innerWidth,
      height: window.innerHeight
    }

    window.addEventListener('resize', () =>
    {
      // Update sizes
      sizes.width = window.innerWidth
      sizes.height = window.innerHeight

      // Update camera
      camera.aspect = sizes.width / sizes.height
      camera.updateProjectionMatrix()

      // Update renderer
      renderer.setSize(sizes.width, sizes.height)
      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
    })

    /**
     * Camera
     */
    // Base camera
    const camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100)
    camera.position.z = 6
    scene.add(camera)

    /**
     * Renderer
     */
    const renderer = new THREE.WebGLRenderer({
      canvas: canvas,
      alpha: true
    })
    renderer.setSize(sizes.width, sizes.height)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))

    /**
     * Animate
     */
    const clock = new THREE.Clock()

    const tick = () =>
    {
        const elapsedTime = clock.getElapsedTime()

        // Render
        renderer.render(scene, camera)

        // Call tick again on the next frame
        window.requestAnimationFrame(tick)
    }

    tick()

  </script>

  <style>

    html {
      background-color: #1e1a20;
    }  
    /* html, body{ */
    /*   overflow: hidden; */
    /* } */
  
    .section{
      display: flex;
      align-items: center;
      height: 100vh;
      position: relative;
      font-family: 'Cabin', sans-serif;
      color: #ffeded;
      text-transform: uppercase;
      font-size: 7vmin;
      padding-left: 10%;
      padding-right: 10%;
    }

    section:nth-child(even){
        justify-content: flex-end;
    }

  </style>

</Layout>
