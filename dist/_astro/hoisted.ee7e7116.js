import{J as B,e as y,m as H,K as R,M as a,a as G,O as v,S as k,q as z,D as C,U as D,r as q,X as I,V as O,w as T,Y as E,Z as F,_ as U,$ as V,l as j,p as J,B as K,u as X,o as Y,P as Z,W as _,C as $}from"./three.module.fce46361.js";import{O as N}from"./OrbitControls.282dc705.js";import{G as Q}from"./lil-gui.esm.1e0f7d72.js";class tt extends B{constructor(s,c){const b=[1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],w=new y;w.setAttribute("position",new H(b,3)),w.computeBoundingSphere();const A=new R({fog:!1});super(w,A),this.light=s,this.color=c,this.type="RectAreaLightHelper";const W=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],g=new y;g.setAttribute("position",new H(W,3)),g.computeBoundingSphere(),this.add(new a(g,new G({side:v,fog:!1})))}updateMatrixWorld(){if(this.scale.set(.5*this.light.width,.5*this.light.height,1),this.color!==void 0)this.material.color.set(this.color),this.children[0].material.color.set(this.color);else{this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);const s=this.material.color,c=Math.max(s.r,s.g,s.b);c>1&&s.multiplyScalar(1/c),this.children[0].material.color.copy(this.material.color)}this.matrixWorld.extractRotation(this.light.matrixWorld).scale(this.scale).copyPosition(this.light.matrixWorld),this.children[0].matrixWorld.copy(this.matrixWorld)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}new Q;const f=document.querySelector("canvas.webgl"),t=new k,et=new z(16777215,.5);t.add(et);const L=new C(65532,.3);L.position.set(1,.25,0);t.add(L);const M=new D(16711680,255,.3);t.add(M);const u=new q(16748544,.5,10,2);u.position.set(1,-.5,1);t.add(u);const p=new I(5112063,2,1,1);p.position.set(-1.5,0,1.5);p.lookAt(new O);t.add(p);const r=new T(7929600,.5,6,Math.PI*.1,.25,1);r.position.set(0,2,3);t.add(r);r.target.position.x=-.75;t.add(r.target);const it=new E(M,.2);t.add(it);const ot=new F(L,.2);t.add(ot);const st=new U(u,.2);t.add(st);const nt=new V(r);t.add(nt);const at=new tt(p);t.add(at);const h=new j;h.roughness=.4;const l=new a(new J(.5,32,32),h);l.position.x=-1.5;const m=new a(new K(.75,.75,.75),h),d=new a(new X(.3,.2,32,64),h);d.position.x=1.5;const x=new a(new Y(5,5),h);x.rotation.x=-Math.PI*.5;x.position.y=-.65;t.add(l,m,d,x);const e={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",()=>{e.width=window.innerWidth,e.height=window.innerHeight,i.aspect=e.width/e.height,i.updateProjectionMatrix(),n.setSize(e.width,e.height),n.setPixelRatio(Math.min(window.devicePixelRatio,2))});const i=new Z(75,e.width/e.height,.1,100);i.position.x=2;i.position.y=1;i.position.z=3;t.add(i);const S=new N(i,f);S.enableDamping=!0;const n=new _({canvas:f});n.setSize(e.width,e.height);n.setPixelRatio(Math.min(window.devicePixelRatio,2));const rt=new $,P=()=>{const o=rt.getElapsedTime();l.rotation.y=.1*o,m.rotation.y=.1*o,d.rotation.y=.1*o,l.rotation.x=.15*o,m.rotation.x=.15*o,d.rotation.x=.15*o,S.update(),n.render(t,i),window.requestAnimationFrame(P)};P();
